{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/agree/ReactNative/tracksclient/node_modules/react-native-elements/src/tooltip/Tooltip.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { withTheme } from \"../config\";\nimport { ScreenWidth, ScreenHeight, isIOS } from \"../helpers\";\nimport Triangle from \"./Triangle\";\nimport getTooltipCoordinate, { getElementVisibleWidth } from \"./getTooltipCoordinate\";\n\nvar Tooltip = function (_React$PureComponent) {\n  _inherits(Tooltip, _React$PureComponent);\n\n  var _super = _createSuper(Tooltip);\n\n  function Tooltip() {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isVisible: false,\n      yOffset: 0,\n      xOffset: 0,\n      elementWidth: 0,\n      elementHeight: 0\n    };\n\n    _this.toggleTooltip = function () {\n      var onClose = _this.props.onClose;\n\n      _this.getElementPosition();\n\n      _this.setState(function (prevState) {\n        if (prevState.isVisible && !isIOS) {\n          onClose && onClose();\n        }\n\n        return {\n          isVisible: !prevState.isVisible\n        };\n      });\n    };\n\n    _this.wrapWithPress = function (toggleOnPress, children) {\n      if (toggleOnPress) {\n        return React.createElement(TouchableOpacity, {\n          onPress: _this.toggleTooltip,\n          activeOpacity: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 9\n          }\n        }, children);\n      }\n\n      return children;\n    };\n\n    _this.getTooltipStyle = function () {\n      var _objectSpread2;\n\n      var _this$state = _this.state,\n          yOffset = _this$state.yOffset,\n          xOffset = _this$state.xOffset,\n          elementHeight = _this$state.elementHeight,\n          elementWidth = _this$state.elementWidth;\n      var _this$props = _this.props,\n          height = _this$props.height,\n          backgroundColor = _this$props.backgroundColor,\n          width = _this$props.width,\n          withPointer = _this$props.withPointer,\n          containerStyle = _this$props.containerStyle;\n\n      var _getTooltipCoordinate = getTooltipCoordinate(xOffset, yOffset, elementWidth, elementHeight, ScreenWidth, ScreenHeight, width, height, withPointer),\n          x = _getTooltipCoordinate.x,\n          y = _getTooltipCoordinate.y;\n\n      return _objectSpread((_objectSpread2 = {\n        position: 'absolute'\n      }, _defineProperty(_objectSpread2, I18nManager.isRTL ? 'right' : 'left', x), _defineProperty(_objectSpread2, \"top\", y), _defineProperty(_objectSpread2, \"width\", width), _defineProperty(_objectSpread2, \"height\", height), _defineProperty(_objectSpread2, \"backgroundColor\", backgroundColor), _defineProperty(_objectSpread2, \"display\", 'flex'), _defineProperty(_objectSpread2, \"alignItems\", 'center'), _defineProperty(_objectSpread2, \"justifyContent\", 'center'), _defineProperty(_objectSpread2, \"flex\", 1), _defineProperty(_objectSpread2, \"borderRadius\", 10), _defineProperty(_objectSpread2, \"padding\", 10), _objectSpread2), containerStyle);\n    };\n\n    _this.renderPointer = function (tooltipY) {\n      var _this$state2 = _this.state,\n          yOffset = _this$state2.yOffset,\n          xOffset = _this$state2.xOffset,\n          elementHeight = _this$state2.elementHeight,\n          elementWidth = _this$state2.elementWidth;\n      var _this$props2 = _this.props,\n          backgroundColor = _this$props2.backgroundColor,\n          pointerColor = _this$props2.pointerColor;\n      var pastMiddleLine = yOffset > tooltipY;\n      return React.createElement(View, {\n        style: _defineProperty({\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2\n        }, I18nManager.isRTL ? 'right' : 'left', xOffset + getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 - 7.5),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, React.createElement(Triangle, {\n        style: {\n          borderBottomColor: pointerColor || backgroundColor\n        },\n        isDown: pastMiddleLine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderContent = function (withTooltip) {\n      var _ref2;\n\n      var _this$props3 = _this.props,\n          popover = _this$props3.popover,\n          withPointer = _this$props3.withPointer,\n          toggleOnPress = _this$props3.toggleOnPress,\n          highlightColor = _this$props3.highlightColor;\n\n      if (!withTooltip) {\n        return _this.wrapWithPress(toggleOnPress, _this.props.children);\n      }\n\n      var _this$state3 = _this.state,\n          yOffset = _this$state3.yOffset,\n          xOffset = _this$state3.xOffset,\n          elementWidth = _this$state3.elementWidth,\n          elementHeight = _this$state3.elementHeight;\n\n      var tooltipStyle = _this.getTooltipStyle();\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: (_ref2 = {\n          position: 'absolute',\n          top: yOffset\n        }, _defineProperty(_ref2, I18nManager.isRTL ? 'right' : 'left', xOffset), _defineProperty(_ref2, \"backgroundColor\", highlightColor), _defineProperty(_ref2, \"overflow\", 'visible'), _defineProperty(_ref2, \"width\", elementWidth), _defineProperty(_ref2, \"height\", elementHeight), _ref2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      }, _this.props.children), withPointer && _this.renderPointer(tooltipStyle.top), React.createElement(View, {\n        style: tooltipStyle,\n        testID: \"tooltipPopoverContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, popover));\n    };\n\n    _this.getElementPosition = function () {\n      var skipAndroidStatusBar = _this.props.skipAndroidStatusBar;\n      _this.renderedElement && _this.renderedElement.measure(function (frameOffsetX, frameOffsetY, width, height, pageOffsetX, pageOffsetY) {\n        _this.setState({\n          xOffset: pageOffsetX,\n          yOffset: isIOS || skipAndroidStatusBar ? pageOffsetY : pageOffsetY - StatusBar.currentHeight,\n          elementWidth: width,\n          elementHeight: height\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setTimeout(this.getElementPosition, 500);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isVisible = this.state.isVisible;\n      var _this$props4 = this.props,\n          onClose = _this$props4.onClose,\n          withOverlay = _this$props4.withOverlay,\n          overlayColor = _this$props4.overlayColor,\n          onOpen = _this$props4.onOpen,\n          ModalComponent = _this$props4.ModalComponent;\n      return React.createElement(View, {\n        collapsable: false,\n        ref: function ref(e) {\n          _this2.renderedElement = e;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 7\n        }\n      }, this.renderContent(false), React.createElement(ModalComponent, {\n        animationType: \"fade\",\n        visible: isVisible,\n        transparent: true,\n        onDismiss: onClose,\n        onShow: onOpen,\n        onRequestClose: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: styles.container(withOverlay, overlayColor),\n        onPress: this.toggleTooltip,\n        activeOpacity: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }\n      }, this.renderContent(true))));\n    }\n  }]);\n\n  return Tooltip;\n}(React.PureComponent);\n\nTooltip.propTypes = {\n  children: PropTypes.element,\n  withPointer: PropTypes.bool,\n  popover: PropTypes.element,\n  toggleOnPress: PropTypes.bool,\n  height: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  pointerColor: PropTypes.string,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  overlayColor: PropTypes.string,\n  withOverlay: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  highlightColor: PropTypes.string,\n  skipAndroidStatusBar: PropTypes.bool,\n  ModalComponent: PropTypes.elementType\n};\nTooltip.defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: function onClose() {},\n  onOpen: function onOpen() {},\n  skipAndroidStatusBar: false,\n  ModalComponent: Modal\n};\nvar styles = {\n  container: function container(withOverlay, overlayColor) {\n    return {\n      backgroundColor: withOverlay ? overlayColor : 'transparent',\n      flex: 1\n    };\n  }\n};\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');","map":{"version":3,"sources":["/Users/agree/ReactNative/tracksclient/node_modules/react-native-elements/src/tooltip/Tooltip.js"],"names":["React","PropTypes","withTheme","ScreenWidth","ScreenHeight","isIOS","Triangle","getTooltipCoordinate","getElementVisibleWidth","Tooltip","state","isVisible","yOffset","xOffset","elementWidth","elementHeight","toggleTooltip","onClose","props","getElementPosition","setState","prevState","wrapWithPress","toggleOnPress","children","getTooltipStyle","height","backgroundColor","width","withPointer","containerStyle","x","y","position","I18nManager","isRTL","renderPointer","tooltipY","pointerColor","pastMiddleLine","top","borderBottomColor","renderContent","withTooltip","popover","highlightColor","tooltipStyle","skipAndroidStatusBar","renderedElement","measure","frameOffsetX","frameOffsetY","pageOffsetX","pageOffsetY","StatusBar","currentHeight","setTimeout","withOverlay","overlayColor","onOpen","ModalComponent","e","styles","container","PureComponent","propTypes","element","bool","number","oneOfType","string","object","array","func","elementType","defaultProps","Modal","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TouchableOpacity,\n  Modal,\n  View,\n  StatusBar,\n  I18nManager,\n} from 'react-native';\n\nimport { withTheme } from '../config';\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\n\nimport Triangle from './Triangle';\nimport getTooltipCoordinate, {\n  getElementVisibleWidth,\n} from './getTooltipCoordinate';\n\nclass Tooltip extends React.PureComponent {\n  state = {\n    isVisible: false,\n    yOffset: 0,\n    xOffset: 0,\n    elementWidth: 0,\n    elementHeight: 0,\n  };\n\n  renderedElement;\n\n  toggleTooltip = () => {\n    const { onClose } = this.props;\n    this.getElementPosition();\n    this.setState(prevState => {\n      if (prevState.isVisible && !isIOS) {\n        onClose && onClose();\n      }\n\n      return { isVisible: !prevState.isVisible };\n    });\n  };\n\n  wrapWithPress = (toggleOnPress, children) => {\n    if (toggleOnPress) {\n      return (\n        <TouchableOpacity onPress={this.toggleTooltip} activeOpacity={1}>\n          {children}\n        </TouchableOpacity>\n      );\n    }\n\n    return children;\n  };\n\n  getTooltipStyle = () => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const {\n      height,\n      backgroundColor,\n      width,\n      withPointer,\n      containerStyle,\n    } = this.props;\n\n    const { x, y } = getTooltipCoordinate(\n      xOffset,\n      yOffset,\n      elementWidth,\n      elementHeight,\n      ScreenWidth,\n      ScreenHeight,\n      width,\n      height,\n      withPointer\n    );\n\n    return {\n      position: 'absolute',\n      [I18nManager.isRTL ? 'right' : 'left']: x,\n      top: y,\n      width,\n      height,\n      backgroundColor,\n      // default styles\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flex: 1,\n      borderRadius: 10,\n      padding: 10,\n      ...containerStyle,\n    };\n  };\n\n  renderPointer = tooltipY => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const { backgroundColor, pointerColor } = this.props;\n    const pastMiddleLine = yOffset > tooltipY;\n\n    return (\n      <View\n        style={{\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n          [I18nManager.isRTL ? 'right' : 'left']:\n            xOffset +\n            getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\n            7.5,\n        }}\n      >\n        <Triangle\n          style={{ borderBottomColor: pointerColor || backgroundColor }}\n          isDown={pastMiddleLine}\n        />\n      </View>\n    );\n  };\n\n  renderContent = withTooltip => {\n    const { popover, withPointer, toggleOnPress, highlightColor } = this.props;\n\n    if (!withTooltip) {\n      return this.wrapWithPress(toggleOnPress, this.props.children);\n    }\n\n    const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\n    const tooltipStyle = this.getTooltipStyle();\n    return (\n      <View>\n        <View\n          style={{\n            position: 'absolute',\n            top: yOffset,\n            [I18nManager.isRTL ? 'right' : 'left']: xOffset,\n            backgroundColor: highlightColor,\n            overflow: 'visible',\n            width: elementWidth,\n            height: elementHeight,\n          }}\n        >\n          {this.props.children}\n        </View>\n        {withPointer && this.renderPointer(tooltipStyle.top)}\n        <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\n          {popover}\n        </View>\n      </View>\n    );\n  };\n\n  componentDidMount() {\n    // wait to compute onLayout values.\n    setTimeout(this.getElementPosition, 500);\n  }\n\n  getElementPosition = () => {\n    const { skipAndroidStatusBar } = this.props;\n    this.renderedElement &&\n      this.renderedElement.measure(\n        (\n          frameOffsetX,\n          frameOffsetY,\n          width,\n          height,\n          pageOffsetX,\n          pageOffsetY\n        ) => {\n          this.setState({\n            xOffset: pageOffsetX,\n            yOffset:\n              isIOS || skipAndroidStatusBar\n                ? pageOffsetY\n                : pageOffsetY - StatusBar.currentHeight,\n            elementWidth: width,\n            elementHeight: height,\n          });\n        }\n      );\n  };\n\n  render() {\n    const { isVisible } = this.state;\n    const {\n      onClose,\n      withOverlay,\n      overlayColor,\n      onOpen,\n      ModalComponent,\n    } = this.props;\n\n    return (\n      <View\n        collapsable={false}\n        ref={e => {\n          this.renderedElement = e;\n        }}\n      >\n        {this.renderContent(false)}\n        <ModalComponent\n          animationType=\"fade\"\n          visible={isVisible}\n          transparent\n          onDismiss={onClose}\n          onShow={onOpen}\n          onRequestClose={onClose}\n        >\n          <TouchableOpacity\n            style={styles.container(withOverlay, overlayColor)}\n            onPress={this.toggleTooltip}\n            activeOpacity={1}\n          >\n            {this.renderContent(true)}\n          </TouchableOpacity>\n        </ModalComponent>\n      </View>\n    );\n  }\n}\n\nTooltip.propTypes = {\n  children: PropTypes.element,\n  withPointer: PropTypes.bool,\n  popover: PropTypes.element,\n  toggleOnPress: PropTypes.bool,\n  height: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  pointerColor: PropTypes.string,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  overlayColor: PropTypes.string,\n  withOverlay: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  highlightColor: PropTypes.string,\n  skipAndroidStatusBar: PropTypes.bool,\n  ModalComponent: PropTypes.elementType,\n};\n\nTooltip.defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: () => {},\n  onOpen: () => {},\n  skipAndroidStatusBar: false,\n  ModalComponent: Modal,\n};\n\nconst styles = {\n  container: (withOverlay, overlayColor) => ({\n    backgroundColor: withOverlay ? overlayColor : 'transparent',\n    flex: 1,\n  }),\n};\n\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');\n"]},"metadata":{},"sourceType":"module"}